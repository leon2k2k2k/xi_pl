todo list:

1. Output:
    a. do some tests: console_input testing, 
    b. implement fix point, int.
    c. test fix point via factorial.

2. Front_end:
    a. Things to add to the UI: We need to add funcionality of foo (x, y) into the UI. Right now Parenthesis is just getting ignored.
        We should be able to figure this out by look at Rust's tree-sitter. Also need
        if, while statements, arithemtics, strings, etc.
    b. Type inference
    c. name resolution: need to have a module system and work with membership.
    d. Streamline the editing process for front_end (string to rowan tree)
    e. Need to add enum and structs into UI.


3. Prettify:
    a. define the bracket thing.
    b. change variable name according to metadata.

4. term_macro:
    a. default T, S. 
    b. compatible with variable names in metadata.
    c. compatibility with generic metadata.

5. Error_handling:
    a. In the front end we need to at least make sure it will pass through the core.

6. Latex handling:
    a. $mathcal{F}$ for respect






test case:

/// print hello world in Aplite:

let str = $hello world"!$
    str : String
let _ = console_output(str)


/// make a file "hello_world.ap"

fn main -> JsIO() {  /// do we need instead JSIo
    let str = console_input!
        str : String
    let _ = console_output(str)
        _ : ()
}


console_input: JSIO String
consone_output: JSIO (String -> ()

let x1 = console_input!
x1 : String

let x = console_input2 (5)
x : JSIO a

console_input2 : Int -> JSIO a


// x : String
let x = console_output


hello, its me, I am California dreaming about who we used to be. When we were, younger and free. 