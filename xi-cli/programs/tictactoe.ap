// we are going to make a tic-tac-toe in Aplite.

// a tic tac toe board is a church encoded pair of 9 sqwuare

// a square is a church encoded enum of three things

let Square = Pi |T : Type| T -> T -> T -> T
with Square let SquareCons : (Pi |T : Type| T -> T -> T -> T) -> Square = lambda |t| t
with Square let SquareElim : Square -> (Pi |T : Type| T -> T -> T -> T) = lambda |t| t

let square_x = SquareCons(lambda |T, x, o, empty| x)

let square_o = SquareCons(lambda |T, x, o, empty| o)

let square_empty = SquareCons(lambda |T, x, o, empty| empty)

let Triple: Type -> Type = lambda|S| (Pi | T : Type| (S -> S -> S -> T) -> T)

with Triple let TripleCons : Pi |S : Type| ((Pi | T : Type| (S -> S -> S -> T) -> T) -> Triple S) = lambda |S, t| t
with Triple let first : Pi |S : Type| Triple S -> S = lambda |S, triple| triple S (lambda |first, second, third| first)
with Triple let second : Pi |S : Type| Triple S -> S = lambda |S, triple| triple S (lambda |first, second, third| second)
with Triple let third : Pi |S : Type| Triple S -> S = lambda |S, triple| triple S (lambda |first, second, third| third)

let Three = Square
with Three let one = square_x
with Three let two = square_o
with Three let three = square_empty
with Three let ThreeElim : Three -> Pi |T : Type| T -> T -> T -> T = SquareElim

let index: Pi |S : Type| Triple S -> Three -> S = lambda |S, triple, num| (ThreeElim num) S (first S triple) (second S triple) (third S triple)

// a board is a triple of triple of squares.
// let board = triple (triple square)
